;;
;; STREAMS.SCM
;;
;; An implementation of streams for EdScheme for Windows that is compatible
;; with the treatment in Chapter 7 of The Schemers Guide (Second Edition)
;;
;; Edward C. Martin, Schemers Inc.
;; 07 May 1997: Revised for v5.0

;; ALERT
;; Because this file contains macro definitions, it should not be LOADed.
;; Instead, it should either be INCLUDEd or else opened into the editor
;; and the whole file evaluated from there.

;; As you solve the exercises and problems in the chapter, replace the definitions
;; here (that generate error messages) by your working definitions.

;; The keyword CONS-STREAM.
;; (cons-stream h t)  returns the stream whose head is the data expression h
;; and whose tail is the stream t.
;;
(define-macro (cons-stream h t)
  `(list ,h (lambda () ,t)))

;; The data abstractor function HEAD.
;; (head stm)  returns the head of the stream stm.
;;
(define head car)

;; The data abstractor function TAIL.
;; (tail stm)  returns the tail of the stream stm.
;;
(define tail
  (lambda (stm) ((cadr stm))))

;; The global variable THE-EMPTY-STREAM.
;;
(define the-empty-stream '( ))

;; The data abstractor predicate function EMPTY-STREAM?
;; Given that its input is known to be a stream, (empty-stream? stm)
;; returns the boolean #t if and only if stm is the empty stream.
;;
(define empty-stream? null?)

;; End of stream implementation
;;

;; Start of some stream-processing functions that are useful in the
;; study of The Schemers Guide (Second Edition) Chapter 7.
;;

;; The function STREAM-INTERVAL (page 246).
;; (stream-interval m n)  returns the stream of whole numbers from m through n.
;;
(define stream-interval
  (lambda (m n)
    (if (< n m)
        the-empty-stream
        (cons-stream m (stream-interval (+ m 1) n)))))

;; The function STREAM-NTH.
;; (stream-nth k stm), where m and n are whole numbers with m < n,
;; returns the kth data expression generated by the stream stm.
;;
(define stream-nth
  (lambda (k stm)
    (error 'stream-nth "You define this function in Exercise 142")))

;; The function STREAM-FILTER (page 249).
;; (stream-filter f stm), where f is a predicate function, returns the stream
;; of all the data expressions generated by the stream stm that produce an
;; output of #t when input to f (i.e. that satisfy f's criterion).
;;
(define stream-filter
  (lambda (f stm)
    (cond
      ((empty-stream? stm) the-empty-stream)
      ((f (head stm)) (cons-stream (head stm) (stream-filter f (tail stm))))
      (else (stream-filter f (tail stm))))))

;; The function STREAM-ACCUMULATE (page 252).
;; (stream-accumulate op init stm), where op is a 2-input function, returns
;; the data expression that results from accumulating the data expressions
;; generated by the stream stm, associating to the left, using the operation
;; op and an initial value of init.
;;
(define stream-accumulate
  (lambda (op init stm)
    (if (empty-stream? stm)
        init
        (op (head stm) (stream-accumulate op init (tail stm))))))

;; The function STREAM-MAP.
;; (stream-map f stm) returns the stream that generates data expressions
;; that result from applying the function f to the data expressions generated
;; by the stream stm.
;;
(define stream-map
  (lambda (f stm)
    (error 'stream-map "You define this function in Exercise 145")))

;; The function WHOLES (page 254).
;; (wholes n)  returns the stream of whole numbers starting from n.
;;
(define wholes
  (lambda (n)
    (cons-stream n (wholes (+ n 1)))))

;; The function STREAM-START.
;; (stream-start n stm) returns the list of the first n data expressions
;; generated by the stream stm.
;;
(define stream-start
  (lambda (n stm)
    (error 'stream-start "You define this function in Problem 6 of PS12")))

;; The function STREAM-SIEVE.
;; (stream-sieve stm) returns the stream of the positive integers that
;; result from applying the Sieve of Eratosthenes technique to the
;; positive integers generated by the stream stm.
;;
(define stream-sieve
  (lambda (s)
    (error 'stream-sieve "You define this function in Problem 7 of PS12")))

;; Useful utility function.
;;
;; The predicate PRIME? (pages 235-236).
;; (prime? n) returns the boolean #t if and only if the positive integer n is a prime.
;;
(define prime?
  (lambda (n)
    (cond
      ((< n 2) #f)
      ((even? n) (= n 2))
      (else (letrec ((test? (lambda (div)
                              (cond
                                ((< n (* div div)) #t)
                                ((zero? (remainder n div)) #f)
                                (else (test? (+ div 2)))))))
              (test? 3))))))

(provide 'streams)

;; end of file STREAMS.SCM
